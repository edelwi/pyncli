{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pyncli - Python NextCloud Command Line Interface Main goal of this project is to create command line interface to work with NextCloud Group Folders. The package includes API and CLI allowing to perform the following actions: create, modify and delete non-domain users of NextCloud servers; search for users on the server and get detailed information on them; enable and disable users; create and delete groups; get and change the groups; get, change and delete sub-administrators (managers) of groups; create, modify and delete group folders; assign and change quota for a group folder; provide and modify access to group folders for groups with a certain level of access (permissions); display a list of installed applications on the NextCloud server; Installing pip install -r https://raw.githubusercontent.com/edelwi/pyncli/master/requirements.txt pip install -i https://test.pypi.org/simple/ pyncli Configurration You should set evironment variables like belowe or create .env file in your users home directory to store your credentials and configuration parameters. Like this: # The user of the cloud from which requests will be made. CLOUD_USER=admin # Cloud users password. CLOUD_USER_PWD=admin # Your NextCloud server URL. Or you can try a demo server, first create it at https://demo.nextcloud.com. CLOUD_BASE_URL=https://demo.nextcloud.com/random_/ # Print log on console. LOG_TO_STDOUT=True # Log file name. LOG_FILE=pyncli.log # The maximum size of the log file. LOG_MAX_BYTES=10240000 # Backups log files count. LOG_BACKUP_COUNT=12 # User in your LDAP who can create groups in LDAP_SEARCH_FOR_GROUPS location. # If you are not using an LDAP server, leave this variable empty and ignore all other variables whose names begin with LDAP_. LDAP_USER=ad_admin@example.com # LDAP users password. LDAP_USER_PWD=very_secret_pass # Primary LDAP server. Used ldaps bind on port 636 by default. LDAP_HOST=dc1.example.com # Additional server, if specified, uses round-robin binding. LDAP_ADD_SERVER=dc2.example.com # Base distinctive names, which is used when searching for users. LDAP_BASE_DN=dc=example,dc=com # Distinguished name of the group organizational unit used to work with ldap groups. LDAP_SEARCH_FOR_GROUPS=OU=special_groups,OU=groups,dc=example,dc=com # Description for created groups. LDAP_NEW_GROUP_DESCRIPTION=\"Access group to cloud group\" # The prefix for the name of the ldap group to the corresponding cloud group. LDAP_GRP_NAME_PREFIX=\"Cloud_\" # The suffix for the name of the ldap group to the corresponding cloud group. LDAP_GRP_NAME_SUFFIX=\"\" # Parent group in which all newly created LDAP groups will be placed. LDAP_PARENT_GRP_NAME=\"My_cloud_shares\" # The quota value that will be applied by default unless explicitly specified. Default 5Gb. Set -3 to unlimited. USER_DEFAULT_QUOTA=\"5368709120\" # The prefix for the group folder name. So you can help the user to distinguish personal folders from group folders. I use surrounding curly braces. GF_NAME_PREFIX=\"{\" # The suffix for the group folder name. So you can help the user to distinguish personal folders from group folders. GF_NAME_SUFFIX=\"}\" # The permissions value that will be applied by default unless explicitly specified. GF_PERMISSION_DEFAULT_STR=\"r\" CLI Command Line menu map Create new GroupFolder pnc new groupfolder --name (-n) GroupfolderName [--permissions (-p)] rcudsa (default r) [--quota (-q)] (default 5g) --usersfile (-u) filename.txt in utf-8 [--debug (-d)] Create new Group pnc new group --name (-n) GroupName --usersfile (-u) filename.txt in utf-8 [--debug (-d)] Create new user pnc new user --login (-l) UserLogin --password (-p) new password [--email (-e)] email [--displayname (-i)] display name [--quota (-q)] quota [--phone (-m)] phone [--address (-a)] address [--website (-w)] website [--twitter (-t)] twitter [--group (-g)] Group name [--debug (-d)] Delete member from the group pnc del group-member --name (-n) GroupName [--fullname (-f)] UserFullName [--login] UserLogin [--debug (-d)] Delete Group pnc del group --name (-n) GroupName [--debug (-d)] Unlink group from the groupfolder pnc del group-link --name (-n) GroupName --groupfolder (-f) GroupfolderName [--debug (-d)] Delete Groupfolder pnc del groupfolder --name (-n) GroupfolderName [--debug (-d)] Demote user as group subadmin pnc del group-subadmin --name (-n) GroupName --login UserLogin [--debug (-d)] Delete user pnc del user --login (-l) UserLogin [--debug (-d)] Get all installed apps pnc get apps [--debug (-d)] Get all cloud groups pnc get groups [--debug (-d)] Get all Groupfolders pnc get groupfolders [--debug (-d)] Get members of the group pnc get group-members --name (-n) GroupName [--debug (-d)] Get permissions of the group pnc get group-permissions --name (-n) GroupName --groupfolder (-f) GroupfolderName [--debug (-d)] Get subadmins of the group pnc get group-subadmins --name (-n) GroupName [--debug (-d)] Get Groupfoldet info pnc get groupfolder --name (-n) GroupfolderName [--debug (-d)] All users of all group folder groups pnc get groupfolder-members --name (-n) GroupfolderName [--debug (-d)] Get user details pnc get user --login userLogin [--debug (-d)] Search/Get users pnc get users [--search (-s)] UserFullName search string [--limit (-l)] rows count [--offset (-o)] offset from begin [--debug (-d)] Add Group to the group folder pnc add group --name (-n) GroupNeme --groupfolder (-f) GroupfolderName [--permissions (-p)] rcudsa (default r) [--debug (-d)] Add User to the Group pnc add user --name (-n) UserFullName --group (-g) GroupeName --login userLogin [--debug (-d)] Add Users to the Group pnc add users --usersfile (-u) filename.txt in utf-8 --group (-g) GroupeName [--debug (-d)] Set new quota for Groupfolder pnc set groupfolder-quota --name (-n) GroupfolderName --quota (-q) quota in bytes [--debug (-d)] Set new name for groupfolder (rename) pnc set groupfolder-name --name (-n) GroupfolderName --newname (-w) NewFolderName [--debug (-d)] Set permissions for group on groupfolder pnc set group-permissions --name (-n) GroupNeme --groupfolder (-f) GroupfolderName [--permissions (-p)] rcudsa (default r) [--debug (-d)] Set user as group subadmin pnc set group-subadmin --name (-n) GroupNeme --login UserLogin [--debug (-d)] Change user parameters pnc set user --login (-l) UserLogin [--password (-p)] new password [--email (-e)] email [--displayname (-i)] display name [--quota (-q)] quota [--phone (-m)] phone [--address (-a)] address [--website (-w)] website [--twitter (-t)] twitter [--debug (-d)] Enable user pnc set user-enable --login (-l) UserLogin [--debug (-d)] Disable user pnc set user-disable --login (-l) UserLogin [--debug (-d)] API You can use the API in the package to automate administrative tasks associated with the creation and maintenance of group folders, groups and users of the NextClood server. There are two different API, for work with NextCloud and for ldap. NextCloud API It is python class uses osc web API to NextCloud server. >>> import pyncli.config >>> import pyncli.ocs >>> cloud=ocs.Ocs(Config.CLOUD_USER, Config.CLOUD_USER_PWD, Config.CLOUD_BASE_URL) >>> cloud.get_apps() ['encryption', 'theming', 'serverinfo', 'admin_audit', 'files_sharing', ... 'password_policy', 'federation', 'gallery', 'user_ldap', 'groupfolders', 'contacts'] >>> cloud.get_groups() [<pyncli.ocs.ocs.Group object at 0x04782310>, <pyncli.ocs.ocs.Group object at 0x04782190>, ... >>> gr=cloud.get_groups() >>> for g in gr: ... print(g.info) ... <Group> \"IT\" <Group> \"PHD\" <Group> \"SECURITY\" <Group> \"admin\" ... print(cloud.get_group_folder(1)) <GroupFolder> (1) \"{IT}\" quota: -3, size: 36.45g <Group> \"IT\" [cruds] ldap API (litle wrapper around fine ldap3 library) If you use ldap backend to NextCloud, it may be useful. Documentation Documentation is available at - pyncli documentation Authors Evgeniy Semenov - Initial work - edelwi License This project is licensed under the MIT License - see the LICENSE file for details Copyright Copyright \u00a9 2019-2021. Evgeniy Semenov.","title":"Home"},{"location":"#pyncli-python-nextcloud-command-line-interface","text":"Main goal of this project is to create command line interface to work with NextCloud Group Folders. The package includes API and CLI allowing to perform the following actions: create, modify and delete non-domain users of NextCloud servers; search for users on the server and get detailed information on them; enable and disable users; create and delete groups; get and change the groups; get, change and delete sub-administrators (managers) of groups; create, modify and delete group folders; assign and change quota for a group folder; provide and modify access to group folders for groups with a certain level of access (permissions); display a list of installed applications on the NextCloud server;","title":"pyncli - Python NextCloud Command Line Interface"},{"location":"#installing","text":"pip install -r https://raw.githubusercontent.com/edelwi/pyncli/master/requirements.txt pip install -i https://test.pypi.org/simple/ pyncli","title":"Installing"},{"location":"#configurration","text":"You should set evironment variables like belowe or create .env file in your users home directory to store your credentials and configuration parameters. Like this: # The user of the cloud from which requests will be made. CLOUD_USER=admin # Cloud users password. CLOUD_USER_PWD=admin # Your NextCloud server URL. Or you can try a demo server, first create it at https://demo.nextcloud.com. CLOUD_BASE_URL=https://demo.nextcloud.com/random_/ # Print log on console. LOG_TO_STDOUT=True # Log file name. LOG_FILE=pyncli.log # The maximum size of the log file. LOG_MAX_BYTES=10240000 # Backups log files count. LOG_BACKUP_COUNT=12 # User in your LDAP who can create groups in LDAP_SEARCH_FOR_GROUPS location. # If you are not using an LDAP server, leave this variable empty and ignore all other variables whose names begin with LDAP_. LDAP_USER=ad_admin@example.com # LDAP users password. LDAP_USER_PWD=very_secret_pass # Primary LDAP server. Used ldaps bind on port 636 by default. LDAP_HOST=dc1.example.com # Additional server, if specified, uses round-robin binding. LDAP_ADD_SERVER=dc2.example.com # Base distinctive names, which is used when searching for users. LDAP_BASE_DN=dc=example,dc=com # Distinguished name of the group organizational unit used to work with ldap groups. LDAP_SEARCH_FOR_GROUPS=OU=special_groups,OU=groups,dc=example,dc=com # Description for created groups. LDAP_NEW_GROUP_DESCRIPTION=\"Access group to cloud group\" # The prefix for the name of the ldap group to the corresponding cloud group. LDAP_GRP_NAME_PREFIX=\"Cloud_\" # The suffix for the name of the ldap group to the corresponding cloud group. LDAP_GRP_NAME_SUFFIX=\"\" # Parent group in which all newly created LDAP groups will be placed. LDAP_PARENT_GRP_NAME=\"My_cloud_shares\" # The quota value that will be applied by default unless explicitly specified. Default 5Gb. Set -3 to unlimited. USER_DEFAULT_QUOTA=\"5368709120\" # The prefix for the group folder name. So you can help the user to distinguish personal folders from group folders. I use surrounding curly braces. GF_NAME_PREFIX=\"{\" # The suffix for the group folder name. So you can help the user to distinguish personal folders from group folders. GF_NAME_SUFFIX=\"}\" # The permissions value that will be applied by default unless explicitly specified. GF_PERMISSION_DEFAULT_STR=\"r\"","title":"Configurration"},{"location":"#cli","text":"Command Line menu map Create new GroupFolder pnc new groupfolder --name (-n) GroupfolderName [--permissions (-p)] rcudsa (default r) [--quota (-q)] (default 5g) --usersfile (-u) filename.txt in utf-8 [--debug (-d)] Create new Group pnc new group --name (-n) GroupName --usersfile (-u) filename.txt in utf-8 [--debug (-d)] Create new user pnc new user --login (-l) UserLogin --password (-p) new password [--email (-e)] email [--displayname (-i)] display name [--quota (-q)] quota [--phone (-m)] phone [--address (-a)] address [--website (-w)] website [--twitter (-t)] twitter [--group (-g)] Group name [--debug (-d)] Delete member from the group pnc del group-member --name (-n) GroupName [--fullname (-f)] UserFullName [--login] UserLogin [--debug (-d)] Delete Group pnc del group --name (-n) GroupName [--debug (-d)] Unlink group from the groupfolder pnc del group-link --name (-n) GroupName --groupfolder (-f) GroupfolderName [--debug (-d)] Delete Groupfolder pnc del groupfolder --name (-n) GroupfolderName [--debug (-d)] Demote user as group subadmin pnc del group-subadmin --name (-n) GroupName --login UserLogin [--debug (-d)] Delete user pnc del user --login (-l) UserLogin [--debug (-d)] Get all installed apps pnc get apps [--debug (-d)] Get all cloud groups pnc get groups [--debug (-d)] Get all Groupfolders pnc get groupfolders [--debug (-d)] Get members of the group pnc get group-members --name (-n) GroupName [--debug (-d)] Get permissions of the group pnc get group-permissions --name (-n) GroupName --groupfolder (-f) GroupfolderName [--debug (-d)] Get subadmins of the group pnc get group-subadmins --name (-n) GroupName [--debug (-d)] Get Groupfoldet info pnc get groupfolder --name (-n) GroupfolderName [--debug (-d)] All users of all group folder groups pnc get groupfolder-members --name (-n) GroupfolderName [--debug (-d)] Get user details pnc get user --login userLogin [--debug (-d)] Search/Get users pnc get users [--search (-s)] UserFullName search string [--limit (-l)] rows count [--offset (-o)] offset from begin [--debug (-d)] Add Group to the group folder pnc add group --name (-n) GroupNeme --groupfolder (-f) GroupfolderName [--permissions (-p)] rcudsa (default r) [--debug (-d)] Add User to the Group pnc add user --name (-n) UserFullName --group (-g) GroupeName --login userLogin [--debug (-d)] Add Users to the Group pnc add users --usersfile (-u) filename.txt in utf-8 --group (-g) GroupeName [--debug (-d)] Set new quota for Groupfolder pnc set groupfolder-quota --name (-n) GroupfolderName --quota (-q) quota in bytes [--debug (-d)] Set new name for groupfolder (rename) pnc set groupfolder-name --name (-n) GroupfolderName --newname (-w) NewFolderName [--debug (-d)] Set permissions for group on groupfolder pnc set group-permissions --name (-n) GroupNeme --groupfolder (-f) GroupfolderName [--permissions (-p)] rcudsa (default r) [--debug (-d)] Set user as group subadmin pnc set group-subadmin --name (-n) GroupNeme --login UserLogin [--debug (-d)] Change user parameters pnc set user --login (-l) UserLogin [--password (-p)] new password [--email (-e)] email [--displayname (-i)] display name [--quota (-q)] quota [--phone (-m)] phone [--address (-a)] address [--website (-w)] website [--twitter (-t)] twitter [--debug (-d)] Enable user pnc set user-enable --login (-l) UserLogin [--debug (-d)] Disable user pnc set user-disable --login (-l) UserLogin [--debug (-d)]","title":"CLI"},{"location":"#api","text":"You can use the API in the package to automate administrative tasks associated with the creation and maintenance of group folders, groups and users of the NextClood server. There are two different API, for work with NextCloud and for ldap.","title":"API"},{"location":"#nextcloud-api","text":"It is python class uses osc web API to NextCloud server. >>> import pyncli.config >>> import pyncli.ocs >>> cloud=ocs.Ocs(Config.CLOUD_USER, Config.CLOUD_USER_PWD, Config.CLOUD_BASE_URL) >>> cloud.get_apps() ['encryption', 'theming', 'serverinfo', 'admin_audit', 'files_sharing', ... 'password_policy', 'federation', 'gallery', 'user_ldap', 'groupfolders', 'contacts'] >>> cloud.get_groups() [<pyncli.ocs.ocs.Group object at 0x04782310>, <pyncli.ocs.ocs.Group object at 0x04782190>, ... >>> gr=cloud.get_groups() >>> for g in gr: ... print(g.info) ... <Group> \"IT\" <Group> \"PHD\" <Group> \"SECURITY\" <Group> \"admin\" ... print(cloud.get_group_folder(1)) <GroupFolder> (1) \"{IT}\" quota: -3, size: 36.45g <Group> \"IT\" [cruds]","title":"NextCloud API"},{"location":"#ldap-api-litle-wrapper-around-fine-ldap3-library","text":"If you use ldap backend to NextCloud, it may be useful.","title":"ldap API (litle wrapper around fine ldap3 library)"},{"location":"#documentation","text":"Documentation is available at - pyncli documentation","title":"Documentation"},{"location":"#authors","text":"Evgeniy Semenov - Initial work - edelwi","title":"Authors"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE file for details","title":"License"},{"location":"#copyright","text":"Copyright \u00a9 2019-2021. Evgeniy Semenov.","title":"Copyright"},{"location":"pyncli/ldap/","text":"pyncli.ldap pyncli.ldap.admexept AdminException AdminException(self, value) Root package exception class. Args: value (str): Description of the exception. NotEnoughParams NotEnoughParams(self, value) Exception class called in case of lack of necessary parameters in the constructor or method call. Args: value (str): Description of the exception. EmptyParam EmptyParam(self, value) Exception class called when a method is called with an empty parameter. Args: value (str): Description of the exception. WrongParam WrongParam(self, value) The exception class that is called when the method is called as a parameter of an invalid type or value. Args: value (str): Description of the exception. TooLong TooLong(self, value) Exception class called when the method is called with an invalid length parameter. Args: value (str): Description of the exception. ConnectionFailure ConnectionFailure(self, value) Exception class called when it is impossible to connect to the specified server. Args: value (str): Description of the exception. OperationFailure OperationFailure(self, value) Exception class called when it is impossible to perform the specified operation. Args: value (str): Description of the exception. NotFound NotFound(self, value) Exception class called in case of problems with the search. Called when the desired object was not found. Args: value (str): Description of the exception. pyncli.ldap.operate2 A module that implements the admin class for working with LDAP. admin admin(self, ldap_admin, admin_pwd, ldap_server_list) Class for administrative operations pyncli.ldap.protogroup protogroup protogroup(self, name, org_unit, **kwargs) base group class pyncli.ldap.group CleanSetAttrMeta CleanSetAttrMeta(self, /, *args, **kwargs) Metaclass to change setattr method group group(self, name, org_unit='ou=test_ou,dc=example,dc=com', description='', **kwargs) common group class pyncli.ldap.protoou CleanSetAttrMeta CleanSetAttrMeta(self, /, *args, **kwargs) Metaclass to change setattr method protoou protoou(self, name, org_unit, **kwargs) base Organisational Unit class pyncli.ldap.ou ou ou(self, name, org_unit='ou=test_ou,dc=example,dc=com', description='', **kwargs) Common Organizational Utit class pyncli.ldap.protouser protouser protouser(self, login, **kwargs) Base user class pyncli.ldap.user CleanSetAttrMeta CleanSetAttrMeta(self, /, *args, **kwargs) Metaclass to change setattr method user user(self, login, uid='', org_unit='OU=test,DC=example,DC=com', surname='', first_name='', middle_name='', company='', department='', division='', position='', mail='', mobile='', other_mailbox='0', other_mobile='0', comment='', employee_type='', acc_control=[<uac.NORMAL_ACCOUNT: 512>, <uac.ACCOUNTDISABLE: 2>], description='', principal_name='', **kwargs) Common user class uac uac(self, /, *args, **kwargs) userAccountControl Enumerator class ACCOUNTDISABLE userAccountControl Enumerator class DONT_EXPIRE_PASSWORD userAccountControl Enumerator class DONT_REQ_PREAUTH userAccountControl Enumerator class ENCRYPTED_TEXT_PWD_ALLOWED userAccountControl Enumerator class hex Get hex representation of uac instance Returns: (str): hex representation of uac instance HOMEDIR_REQUIRED userAccountControl Enumerator class INTERDOMAIN_TRUST_ACCOUNT userAccountControl Enumerator class LOCKOUT userAccountControl Enumerator class MNS_LOGON_ACCOUNT userAccountControl Enumerator class NORMAL_ACCOUNT userAccountControl Enumerator class NOT_DELEGATED userAccountControl Enumerator class PASSWD_CANT_CHANGE userAccountControl Enumerator class PASSWD_NOTREQD userAccountControl Enumerator class PASSWORD_EXPIRED userAccountControl Enumerator class SCRIPT userAccountControl Enumerator class SERVER_TRUST_ACCOUNT userAccountControl Enumerator class SMARTCARD_REQUIRED userAccountControl Enumerator class TEMP_DUPLICATE_ACCOUNT userAccountControl Enumerator class TRUSTED_FOR_DELEGATION userAccountControl Enumerator class TRUSTED_TO_AUTH_FOR_DELEGATION userAccountControl Enumerator class USE_DES_KEY_ONLY userAccountControl Enumerator class val Get value of uac instance Returns: (int): value of uac instance WORKSTATION_TRUST_ACCOUNT userAccountControl Enumerator class get_status uac.get_status(hex_status_code) Get a list of userAccountControl flags names. Args: hex_status_code (str): userAccountControl hex value Returns: (list): userAccountControl flags names. get_uac uac.get_uac(hex_status_code) Get a list of userAccountControl flags. Args: hex_status_code (str): userAccountControl hex value Returns: (list): userAccountControl flags. get_control uac.get_control(flag_list) Get userAccountControl value. Args: flag_list (list): userAccountControl list Returns: (list): userAccountControl hex value or False. pyncli.ldap.utill Module with auxiliary functions. download_file download_file(url, local_path, user, pwd) Download file Downloads a file with basic authentication. Args: url (str): URL local_path (str): file full name user (str): user name pwd (str): password Returns: (str): file full name Raises: ConnectionFailure: connection failure upload_file upload_file(url, data, login, pwd) Upload file Uploads a file with basic authentication. Args: url (str): URL data (str): string or buffer to load login (str): user name pwd (str): password Returns: (str): file full name Raises: OperationFailure: operation failure mailto mailto(msg_from, msg_to_list, smpt, subject, text) Simple mailto function Sends a message to one or a group of recipients. Args: msg_from (str): From whom msg_to_list (list): List of email recipients. smpt (str): SMTP server name or IP subject (str): subject of the message text (str): text of the message Raises: ConnectionFailure: connection failure trim trim(text) Removes extra spaces from text. Args: text (str): text Returns: (str): processed text trim_low trim_low(text) Removes extra spaces from text and set it to lower case. Args: text (str): text Returns: (str): processed text split_names split_names(fullname) Splits user fullname by surname, first name and middle name. Args: fullname (str): full name (The first word is considered the surname, the second first name, all the rest go to the middle name. This is the Russian name record format.) Returns: (dict): Dictionary with surname, first name and middle name as values. date_str_to_generalize_time date_str_to_generalize_time(date_str) Converts date in string format to date in generalized time format. Args: date_str (str): Date string in formats %Y-%m-%d, %Y/%m/%d or %d.%m.%Y Returns: (str): Date in generalized time format. Note: Time zone information is not supported. is_generalized_time is_generalized_time(date_str) Checks is this string look like generalized time. Args: date_str (str): Date string Returns: (bool): True if input string is generalized time. Note: Time zone information is not supported. generalized_time_to_datetime generalized_time_to_datetime(gen_time) Converts date in generalized time format to datetime Args: gen_time (str): Date string in generalized time format Returns: (datetime): datetime object Note: Time zone information is not supported. datetime_to_generalized_time datetime_to_generalized_time(date_time) Converts datetime to generalized time format. Args: date_time (datetime): datetime object Returns: (str): Date in generalized time format. Note: Time zone information is not supported.","title":"Simple LDAP API"},{"location":"pyncli/ocs/","text":"pyncli.ocs pyncli.ocs.ocs This module implements little part of the web API for the NextCloud server. human_size human_size(size_in_bytes) Get size in kilo,Mega,Giga... bytes. human_permissions human_permissions(permissions, short=False) Get permissions in readable form. Comparer Comparer(self, /, *args, **kwargs) Mixin class to add compare methods GroupMembers GroupMembers(self, user_id) GroupMembers class CreateGroupFolder CreateGroupFolder(self, id) CreateGroupFolder class Group Group(self, group_id=None, permissions=None) Group class GroupFolder GroupFolder(self, id=None, mount_point=None, groups=None, quota=None, size=None, **kwargs) GroupFolder class AppInfo AppInfo(self, id, info=None, remote={}, public=None, name=None, description=None, licence=None, author=None, require=None, shipped=None, standalone=None, default_enable=None, types=[]) AppInfo class, contains detailed information about application. User User(self, id=None, enabled=None, storageLocation=None, lastLogin=None, backend=None, subadmin=None, quota=None, email=None, displayname=None, phone=None, address=None, website=None, twitter=None, groups=None, language=None, locale=None, backendCapabilities=None) NextCloud User UserQuota UserQuota(self, quota, used=0, free=None, total=None, relative=None) NextCloud user quota class BackendCapabilities BackendCapabilities(self, setDisplayName=None, setPassword=None) NectCloud BackendCapabilities class OcsXmlResponse OcsXmlResponse(self, xml_text, data_class_name=None) NextCloud answer parser class. GroupFolderMixin GroupFolderMixin(self, /, *args, **kwargs) GroupFolder Mixin for Ocs class Ocs Ocs(self, cloud_user, cloud_user_pwd, cloud_URL) Class wrapper over ocs. Dynamically expandable class.","title":"Simple Ocs API"}]}